@model BookManagementSystem_BMS.ViewModels.BookViewModel
@{
    ViewData["Title"] = "Home";
}

<div style="display: flex; flex-direction: column; height: 100vh;">
    <div style="flex: 1; display: flex; border:10px;" class="border">
        <div style="flex: 1; padding: 10px;" class="border">
            <h2>Categories</h2>
            <ul>
                @foreach (var category in Model.AllCategories)
                {
                    <li>
                        <a href="@Url.Action("Details", new { categoryId = category.CategoryID })">
                            @category.CategoryName
                        </a>
                    </li>
                }
            </ul>
        </div>
        <div style="flex: 1; padding: 10px;" class="border">
            <h4>Books</h4>
            <div class="form-group">
                <label for="selectedBook">Select Book:</label>
                @Html.DropDownListFor(model => model.SelectedBookId, new SelectList(Model.Books,
                "BookID", "BookName"), "-- Select a Book --", new { id = "selectedBook",
                @class = "form-control", onchange="loadChapters()",})

            </div>
            <div class="form-group">
                <div id="chapters">
                    <h4>Chapters</h4>
                    <div >
                        <label for="selectedChapter">Select Chapter:</label>
                        <select>
                            <option value="" >--- Select Chapter ---</option>
                        </select>
                    </div>
                </div>
                <button class="btn btn-primary" type="submit" onclick="loadChapterContent()">Submit</button>
            </div>
        </div>
    </div>
    <div style="flex: 1; padding: 10px;" class="border">
        <h2>Random Book Images</h2>
        <ul>
            @foreach (var book in Model.Books)
            {
                <li class="border">
                    <a href="@Url.Action("BookOverviewByCover", new { bookId = book.BookID, categoryId=book.CategoryID, home=-1})">
                        <img src="@book.CoverPage" alt="@book.BookName" width="150" height="200" />
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        // AJAX call to get matching books based on input text
        $('#bookName').keyup(function () {
            var searchText = $(this).val();

            if (searchText.length >= 3) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("SearchBooks", "Book")',
                    data: { searchText: searchText },
                    success: function (result) {
                        $('#searchResults').html(result);
                    }
                });
            }
            else {
                $('#searchResults').empty();
            }
        });

        // AJAX call to get chapters of selected book
        $('#selectedBook').change(function () {
            var bookId = $(this).val();

            if (bookId !== '') {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetChapters", "Book")',
                    data: { bookId: bookId },
                    success: function (result) {
                        $('#chapterList').html(result);
                    }
                });
            }
            else {
                $('#chapterList').empty();
            }
        });
        function loadChapters() {
            console.log("load chapters")
            let bookId = $("#selectedBook").val();
            if (bookId !== "") {
                $.ajax({
                    url: '@Url.Action("GetChaptersByBook")',
                    type: 'GET',
                    data: { bookId: bookId, chapterId: @Model.SelectedChapterId },
                    success: function (result) {
                        $("#chapters").html(result);
                    },
                    error: function () {
                        alert("An error occurred while loading chapters.");
                    }
                });
            }
            else {
                $("#chapters").html("<option value=''>Select a book first</option>");
            }
        }
        function loadChapterContent(){
            console.log("Load Content")
            let bookId = $("#selectedBook").val();
            let chapterId = $("#selectedChapter").val();
            if (bookId !== "" && chapterId !== "") {
                $.ajax({
                    url: '@Url.Action("BookOverviewByCover")',
                    type: 'GET',
                    data: { bookId: bookId, categoryId:-1, chapterId: chapterId, home:1},
                    success: function (result) {
                        $("#chapters").html(result);
                    },
                    error: function () {
                        alert("An error occurred while loading chapters.");
                    }
                });
            }
            else {
                $("#chapters").html("<option value=''>Select a book first</option>");
            }
        }
    </script>
}